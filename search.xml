<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java 09 例外處理 try-catch-finally</title>
      <link href="/2025/05/04/Java/java-09/"/>
      <url>/2025/05/04/Java/java-09/</url>
      
        <content type="html"><![CDATA[<h1 id="認識-Java-例外處理（Exception-Handling）"><a href="#認識-Java-例外處理（Exception-Handling）" class="headerlink" title="認識 Java 例外處理（Exception Handling）"></a>認識 Java 例外處理（Exception Handling）</h1><p>當程式遇到錯誤時（如除以零、讀不到檔案），若沒有妥善處理，會造成程式中斷。<br>Java 使用 <code>try-catch-finally</code> 結構搭配 <code>throw</code>、<code>throws</code> 來控制錯誤流程。</p><hr><h1 id="類別：ExceptionExample"><a href="#類別：ExceptionExample" class="headerlink" title="類別：ExceptionExample"></a>類別：ExceptionExample</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        divideSafe(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">        parseIntSafe(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line">        tryWithFinally();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            customThrow(-<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[main] 捕捉自訂錯誤：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">divideSafe</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a / b;</span><br><span class="line">            System.out.println(<span class="string">&quot;[divide] 結果：&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[divide] 錯誤：除以零！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">parseIntSafe</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> Integer.parseInt(input);</span><br><span class="line">            System.out.println(<span class="string">&quot;[parse] 轉換結果：&quot;</span> + number);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[parse] 格式錯誤：&quot;</span> + input);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tryWithFinally</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[finally] 嘗試執行&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[finally] 一定會執行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">customThrow</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;年齡不能是負數&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;[throw] 年齡為：&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 方法說明：divideSafe(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line"></span><br><span class="line">### 功能</span><br><span class="line"></span><br><span class="line">使用 `<span class="keyword">try</span>-<span class="keyword">catch</span>` 處理除以零錯誤</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">divideSafe</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a / b;</span><br><span class="line">        System.out.println(<span class="string">&quot;[divide] 結果：&quot;</span> + result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[divide] 錯誤：除以零！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 2: 使用 <code>try</code> 包住可能發生錯誤的程式區塊</li><li>Line 3: 若 <code>b = 0</code>，會丟出 <code>ArithmeticException</code></li><li>Line 5: 在 <code>catch</code> 中接收例外物件 <code>e</code> 並處理</li></ul><hr><h2 id="方法說明：parseIntSafe-String-input"><a href="#方法說明：parseIntSafe-String-input" class="headerlink" title="方法說明：parseIntSafe(String input)"></a>方法說明：parseIntSafe(String input)</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>處理將字串轉換為整數時可能發生的格式錯誤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">parseIntSafe</span><span class="params">(String input)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> Integer.parseInt(input);</span><br><span class="line">        System.out.println(<span class="string">&quot;[parse] 轉換結果：&quot;</span> + number);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[parse] 格式錯誤：&quot;</span> + input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 3: 嘗試將字串轉為整數</li><li>Line 6: 當輸入不是數字時會拋出 <code>NumberFormatException</code></li></ul><hr><h2 id="方法說明：tryWithFinally"><a href="#方法說明：tryWithFinally" class="headerlink" title="方法說明：tryWithFinally()"></a>方法說明：tryWithFinally()</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>展示 <code>finally</code> 區塊的使用，無論是否發生錯誤都會執行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tryWithFinally</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[finally] 嘗試執行&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[finally] 一定會執行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 3: <code>try</code> 區塊正常執行</li><li>Line 5: <code>finally</code> 永遠執行，用於釋放資源等用途（如關檔案）</li></ul><hr><h2 id="方法說明：customThrow-int-age"><a href="#方法說明：customThrow-int-age" class="headerlink" title="方法說明：customThrow(int age)"></a>方法說明：customThrow(int age)</h2><h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><p>示範自訂例外條件並手動 <code>throw</code> 例外</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">customThrow</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;年齡不能是負數&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;[throw] 年齡為：&quot;</span> + age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明-3"><a href="#說明-3" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 2: 若條件不符合，手動使用 <code>throw</code> 丟出例外</li><li>Line 3: 使用內建例外類別 <code>IllegalArgumentException</code></li></ul><hr><h1 id="本章練習題"><a href="#本章練習題" class="headerlink" title="本章練習題"></a>本章練習題</h1><ol><li><p>撰寫方法 <code>divide(int a, int b)</code>，若除以 0，回傳 <code>&quot;錯誤&quot;</code>，否則回傳字串結果</p></li><li><p>實作方法 <code>safeParse(String s)</code>，若字串為數字則轉換為整數回傳，否則回傳 -1</p></li><li><p>撰寫方法 <code>readFile(String path)</code>，嘗試開啟檔案（可模擬路徑），即使錯誤也要印出 <code>&quot;已結束&quot;</code>（用 finally）</p></li><li><p>（加分題）撰寫 <code>checkScore(int score)</code>，若分數 &lt; 0 或 &gt; 100，丟出 <code>IllegalArgumentException</code>，否則輸出分數</p></li></ol><hr><h1 id="本章總結"><a href="#本章總結" class="headerlink" title="本章總結"></a>本章總結</h1><table><thead><tr><th>概念</th><th>關鍵語法</th><th>說明</th></tr></thead><tbody><tr><td>捕捉例外</td><td><code>try &#123; ... &#125; catch (類型 e) &#123; ... &#125;</code></td><td>處理執行中可能出錯的情況</td></tr><tr><td>保證執行</td><td><code>finally &#123; ... &#125;</code></td><td>無論是否錯誤都會執行</td></tr><tr><td>手動丟出例外</td><td><code>throw new Exception()</code></td><td>建立並丟出例外</td></tr><tr><td>宣告會丟出</td><td><code>throws Exception</code></td><td>用於方法簽章中（本章未用）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 例外處理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 08 繼承、多型與介面</title>
      <link href="/2025/05/04/Java/java-08/"/>
      <url>/2025/05/04/Java/java-08/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-OOP：繼承、多型、介面"><a href="#Java-OOP：繼承、多型、介面" class="headerlink" title="Java OOP：繼承、多型、介面"></a>Java OOP：繼承、多型、介面</h1><p>本章進一步擴充物件導向設計，讓類別之間可共享功能並擴展彈性。<br>三個關鍵核心：</p><ul><li>繼承（extends）→ 子類別複用父類別邏輯</li><li>多型（override）→ 子類別自定義方法行為</li><li>介面（interface）→ 行為契約設計</li></ul><hr><h1 id="類別一：Animal（父類別）"><a href="#類別一：Animal（父類別）" class="headerlink" title="類別一：Animal（父類別）"></a>類別一：Animal（父類別）</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>建立一個可被繼承的基本類別，提供共通欄位與方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Animal] &quot;</span> + name + <span class="string">&quot; 發出聲音&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">## 說明</span><br><span class="line"></span><br><span class="line">* Line <span class="number">1</span>: 套件 →請參考 Java <span class="number">01.</span>簡介</span><br><span class="line">* Line <span class="number">3</span>: 宣告父類別 `Animal`</span><br><span class="line">* Line <span class="number">4</span>: 公開屬性 `name`</span><br><span class="line">* Line <span class="number">6</span>: 建構子接收名稱參數</span><br><span class="line">* Line <span class="number">9</span>: 方法 `speak()` 為共通行為，可被覆寫</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># 類別二：Dog（子類別繼承 Animal）</span><br><span class="line"></span><br><span class="line">## 功能</span><br><span class="line"></span><br><span class="line">繼承 Animal，並改寫 `speak()` 方法行為</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Dog] &quot;</span> + name + <span class="string">&quot;：汪汪！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 使用 <code>extends</code> 繼承 <code>Animal</code></li><li>Line 3: 呼叫父類別建構子 <code>super(name)</code></li><li>Line 6: 使用 <code>@Override</code> 覆寫 <code>speak()</code> 方法</li></ul><blockquote><p><strong>小提醒</strong><br><code>super()</code> 是呼叫父類別的建構子<br><code>@Override</code> 用於確認你確實覆寫了父類別的方法</p></blockquote><hr><h1 id="類別三：OopTest（建立物件與執行）"><a href="#類別三：OopTest（建立物件與執行）" class="headerlink" title="類別三：OopTest（建立物件與執行）"></a>類別三：OopTest（建立物件與執行）</h1><h2 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h2><p>建立 <code>Animal</code> 與 <code>Dog</code> 物件，執行多型測試</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OopTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;動物&quot;</span>);</span><br><span class="line">        a1.speak();</span><br><span class="line"></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小黑&quot;</span>);</span><br><span class="line">        d1.speak();</span><br><span class="line"></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小白&quot;</span>);</span><br><span class="line">        a2.speak(); <span class="comment">// 多型：Animal 型別 → Dog 實體</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 3: 建立父類別物件</li><li>Line 6: 建立子類別物件</li><li>Line 9: 父型別接收子類別 → 多型現象</li></ul><hr><h1 id="介面：Walkable（定義行為契約）"><a href="#介面：Walkable（定義行為契約）" class="headerlink" title="介面：Walkable（定義行為契約）"></a>介面：Walkable（定義行為契約）</h1><h2 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h2><p>定義 <code>walk()</code> 方法，讓類別能選擇實作（implements）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Walkable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 介面不包含邏輯，只定義方法名稱</li><li>Line 2: 無實作內容；實作時必須實作該方法</li></ul><hr><h1 id="實作介面：Dog-加入-walk-功能"><a href="#實作介面：Dog-加入-walk-功能" class="headerlink" title="實作介面：Dog 加入 walk 功能"></a>實作介面：Dog 加入 walk 功能</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Walkable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Dog] &quot;</span> + name + <span class="string">&quot;：汪汪！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Dog] &quot;</span> + name + <span class="string">&quot; 開始散步&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-3"><a href="#說明-3" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 同時繼承類別與實作介面（<code>extends + implements</code>）</li><li>Line 9: 需實作介面中的 <code>walk()</code> 方法</li></ul><hr><h1 id="本章練習題"><a href="#本章練習題" class="headerlink" title="本章練習題"></a>本章練習題</h1><ol><li><p>建立 <code>Cat</code> 類別，繼承 <code>Animal</code> 並覆寫 <code>speak()</code> 印出 <code>喵喵</code></p></li><li><p>建立介面 <code>Playable</code>，定義 <code>play()</code> 方法，讓 <code>Cat</code> 加以實作</p></li><li><p>在 <code>main()</code> 中建立 <code>Animal</code>, <code>Dog</code>, <code>Cat</code> 實體並統一使用 <code>Animal[]</code> 儲存，呼叫 <code>speak()</code> 展示多型</p></li><li><p>（加分題）建立另一個介面 <code>Swimmable</code>，定義 <code>swim()</code>，讓 <code>Dog</code> 可同時 <code>walk()</code> 與 <code>swim()</code></p></li></ol><hr><h1 id="本章總結"><a href="#本章總結" class="headerlink" title="本章總結"></a>本章總結</h1><table><thead><tr><th>概念</th><th>說明</th><th>關鍵語法</th></tr></thead><tbody><tr><td>繼承</td><td>子類別複用父類別欄位與方法</td><td><code>class Dog extends Animal</code></td></tr><tr><td>建構子傳遞</td><td>子類別使用 <code>super()</code> 呼叫父建構子</td><td><code>super(name)</code></td></tr><tr><td>覆寫</td><td>子類別覆寫父類別方法</td><td><code>@Override</code></td></tr><tr><td>多型</td><td>父類別變數 → 子類別實體</td><td><code>Animal a = new Dog()</code></td></tr><tr><td>介面</td><td>定義方法規格（無邏輯）</td><td><code>interface Walkable</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 07 物件導向基礎（OOP）：類別、屬性、建構子</title>
      <link href="/2025/05/04/Java/java-07/"/>
      <url>/2025/05/04/Java/java-07/</url>
      
        <content type="html"><![CDATA[<h1 id="認識-Java-類別與物件（Object-Oriented-Programming）"><a href="#認識-Java-類別與物件（Object-Oriented-Programming）" class="headerlink" title="認識 Java 類別與物件（Object-Oriented Programming）"></a>認識 Java 類別與物件（Object-Oriented Programming）</h1><p>在 Java 中，所有邏輯皆以「物件」為單位進行封裝與呼叫。<br>本章介紹物件導向的第一步：<strong>類別、屬性、建構子、this 與方法</strong></p><hr><h1 id="類別說明：Person（封裝資料與行為）"><a href="#類別說明：Person（封裝資料與行為）" class="headerlink" title="類別說明：Person（封裝資料與行為）"></a>類別說明：Person（封裝資料與行為）</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>定義一個 <code>Person</code> 類別，包含姓名、年齡等欄位，並提供建構子與對外方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Person] 我是 &quot;</span> + name + <span class="string">&quot;，今年 &quot;</span> + age + <span class="string">&quot; 歲&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">## 說明</span><br><span class="line"></span><br><span class="line">* Line <span class="number">1</span>: 「套件」（<span class="keyword">package</span>）→請參考 Java <span class="number">01.</span>簡介</span><br><span class="line">* Line <span class="number">3</span>: 宣告類別 `Person`</span><br><span class="line">* Line <span class="number">4</span>–<span class="number">5</span>: 宣告兩個屬性（`<span class="keyword">public</span>`）</span><br><span class="line">* Line <span class="number">7</span>: 建構子，名稱與類別相同</span><br><span class="line">* Line <span class="number">8</span>–<span class="number">9</span>: 使用 `<span class="built_in">this</span>` 表示「這個物件自己的變數」</span><br><span class="line">* Line <span class="number">11</span>: 方法 `sayHello()` 可印出屬性資訊</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># 類別使用：OopExample</span><br><span class="line"></span><br><span class="line">## 功能</span><br><span class="line"></span><br><span class="line">示範如何使用 `<span class="keyword">new</span>` 建立物件、如何呼叫其方法。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OopExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Mendel&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        p1.sayHello();</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        p2.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 「套件」（package）→請參考 Java 01.簡介</li><li>Line 3: 宣告類別 <code>OopExample</code></li><li>Line 4: 「主方法」（main）→請參考 Java 01.簡介</li><li>Line 5: 使用建構子建立第一個 Person 物件</li><li>Line 6: 呼叫 <code>sayHello()</code> 方法</li><li>Line 8–9: 建立第二個物件並執行相同行為</li></ul><hr><h1 id="建構子-Overloading：多種建立方式"><a href="#建構子-Overloading：多種建立方式" class="headerlink" title="建構子 Overloading：多種建立方式"></a>建構子 Overloading：多種建立方式</h1><h2 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h2><p>提供多個建構子以支援預設值或不同的初始化方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;未命名&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 建構子無參數版本（預設用）</li><li>Line 2–3: 使用 <code>this.屬性</code> 指定預設值</li></ul><hr><h1 id="方法補充：setName-與-getName（預告封裝）"><a href="#方法補充：setName-與-getName（預告封裝）" class="headerlink" title="方法補充：setName 與 getName（預告封裝）"></a>方法補充：setName 與 getName（預告封裝）</h1><h2 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h2><p>以方法控制屬性存取（下一章會正式講封裝）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h2><ul><li><code>setName</code> 可修改屬性</li><li><code>getName</code> 取得值，未直接讀取欄位</li></ul><blockquote><p><strong>小提醒</strong><br>將屬性設為 <code>private</code>，改由 <code>getter/setter</code> 存取是封裝的基礎技巧（Java 08 詳述）</p></blockquote><hr><h1 id="本章練習題"><a href="#本章練習題" class="headerlink" title="本章練習題"></a>本章練習題</h1><ol><li><p>定義 <code>Dog</code> 類別，包含 <code>name</code>、<code>breed</code>，提供建構子與 <code>bark()</code> 方法，印出 <code>xxx 汪汪！</code></p></li><li><p>定義 <code>Car</code> 類別，提供兩種建構子：</p><ul><li><code>Car(String brand, int year)</code></li><li><code>Car()</code>，預設 <code>&quot;Toyota&quot;, 2020</code></li></ul></li><li><p>定義 <code>Student</code> 類別，屬性 <code>score</code>，提供 <code>printGrade()</code> 方法判斷 A&#x2F;B&#x2F;C&#x2F;D&#x2F;F</p></li><li><p>（加分題）將屬性設為 <code>private</code>，改由 <code>getXxx()</code>、<code>setXxx()</code> 操作</p></li></ol><hr><h1 id="本章總結"><a href="#本章總結" class="headerlink" title="本章總結"></a>本章總結</h1><table><thead><tr><th>概念</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td>類別</td><td>封裝資料與邏輯的模版</td><td><code>class Person &#123;&#125;</code></td></tr><tr><td>屬性</td><td>代表物件的狀態資料</td><td><code>String name;</code></td></tr><tr><td>建構子</td><td>初始化時執行，用於設定初始值</td><td><code>new Person(&quot;Mendel&quot;, 30)</code></td></tr><tr><td>this</td><td>指向目前物件，用於區分變數</td><td><code>this.name = name;</code></td></tr><tr><td>方法</td><td>提供外部呼叫功能</td><td><code>sayHello()</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 06 方法進階與參數設計</title>
      <link href="/2025/05/03/Java/java-06/"/>
      <url>/2025/05/03/Java/java-06/</url>
      
        <content type="html"><![CDATA[<h1 id="認識方法的彈性設計"><a href="#認識方法的彈性設計" class="headerlink" title="認識方法的彈性設計"></a>認識方法的彈性設計</h1><p>在 Java 中，方法（Method）不只是封裝邏輯，更重要的是可透過：</p><ul><li>傳遞參數來控制輸入</li><li>回傳結果進行處理</li><li>同一方法名稱可使用不同參數（Overloading）</li></ul><hr><h1 id="類別：MethodExample"><a href="#類別：MethodExample" class="headerlink" title="類別：MethodExample"></a>類別：MethodExample</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        greet(<span class="string">&quot;Mendel&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;[main] 加總結果：&quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        modifyArray(nums);</span><br><span class="line">        System.out.println(<span class="string">&quot;[main] 修改後陣列第 1 筆：&quot;</span> + nums[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[overload] int 加法：&quot;</span> + multiply(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;[overload] double 加法：&quot;</span> + multiply(<span class="number">2.5</span>, <span class="number">3.5</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[greet] Hello, &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modifyArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">multiply</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="方法說明：greet-String-name"><a href="#方法說明：greet-String-name" class="headerlink" title="方法說明：greet(String name)"></a>方法說明：greet(String name)</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>傳入名字並輸出歡迎訊息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;[greet] Hello, &quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 2: 宣告一個接收 <code>String</code> 的方法 <code>greet</code></li><li>Line 3: 使用傳入參數組合輸出文字</li></ul><hr><h2 id="方法說明：add-int-a-int-b"><a href="#方法說明：add-int-a-int-b" class="headerlink" title="方法說明：add(int a, int b)"></a>方法說明：add(int a, int b)</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>傳入兩個整數，回傳相加結果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 2: 方法有回傳值（<code>int</code>），可用於主程式再運算</li><li>Line 3: 使用 <code>return</code> 傳出加總結果</li></ul><hr><h2 id="方法說明：modifyArray-int-arr"><a href="#方法說明：modifyArray-int-arr" class="headerlink" title="方法說明：modifyArray(int[] arr)"></a>方法說明：modifyArray(int[] arr)</h2><h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><p>示範傳參考（Reference）對原陣列產生變動</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modifyArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 2: 傳入陣列（物件型別）會直接修改原始資料</li><li>Line 3: 將第 1 筆元素設為 99，主程式也會改變</li></ul><blockquote><p><strong>小提醒</strong><br>傳值（int, double 等）會複製值<br>傳參考（陣列、物件）會共用記憶體位置</p></blockquote><hr><h2 id="方法說明：multiply（Overloading）"><a href="#方法說明：multiply（Overloading）" class="headerlink" title="方法說明：multiply（Overloading）"></a>方法說明：multiply（Overloading）</h2><h3 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h3><p>同名方法 <code>multiply</code>，依參數型別決定執行內容（int 或 double）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">multiply</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明-3"><a href="#說明-3" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 2&#x2F;6: 方法名稱相同，但參數型別不同（int vs double）</li><li>Line 3&#x2F;7: 回傳對應型別結果，呼叫時會自動比對</li></ul><blockquote><p><strong>小提醒</strong><br>方法名稱相同、參數不同就是 <strong>Overloading（多載）</strong><br>可增加程式彈性，不需額外命名新方法</p></blockquote><hr><h1 id="本章練習題"><a href="#本章練習題" class="headerlink" title="本章練習題"></a>本章練習題</h1><ol><li><p>撰寫方法 <code>greet(String name, int age)</code>，輸出 <code>&quot;Hello, [name]. You are [age] years old.&quot;</code></p></li><li><p>撰寫方法 <code>max(int a, int b)</code> 回傳較大的值</p></li><li><p>撰寫方法 <code>sum(int[] arr)</code> 回傳整數陣列的加總值</p></li><li><p>撰寫一個方法 <code>printLine(String symbol, int count)</code>，用 symbol 輸出 count 次的直線（Ex: <code>&quot;*&quot;</code> x 10）</p></li><li><p>（加分題）為 <code>multiply(int, int)</code> 與 <code>multiply(double, double)</code> 再加上 <code>multiply(int, int, int)</code> 多載版本</p></li></ol><hr><h1 id="本章總結"><a href="#本章總結" class="headerlink" title="本章總結"></a>本章總結</h1><table><thead><tr><th>功能</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td>傳值</td><td>基本型別（int, double）複製內容</td><td><code>add(a, b)</code></td></tr><tr><td>傳參考</td><td>陣列、物件傳址，原物件會被改變</td><td><code>modifyArray(arr)</code></td></tr><tr><td>回傳值</td><td>使用 <code>return</code> 傳結果回主程式</td><td><code>int result = add()</code></td></tr><tr><td>Overloading</td><td>同名方法支援不同參數型別</td><td><code>multiply(int)</code> vs <code>multiply(double)</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 05-2 集合（List / Set / Map）</title>
      <link href="/2025/05/03/Java/java-05-2/"/>
      <url>/2025/05/03/Java/java-05-2/</url>
      
        <content type="html"><![CDATA[<h1 id="認識-Java-集合（Collection）"><a href="#認識-Java-集合（Collection）" class="headerlink" title="認識 Java 集合（Collection）"></a>認識 Java 集合（Collection）</h1><p>Java 中的集合（Collection）用來處理「不定數量」的資料，與固定長度的陣列不同。<br>本章將介紹三種最常用的集合：</p><table><thead><tr><th>類型</th><th>說明</th><th>是否可重複</th><th>是否有順序</th></tr></thead><tbody><tr><td>List</td><td>有順序、可重複</td><td>✅ 是</td><td>✅ 是</td></tr><tr><td>Set</td><td>無順序、不重複</td><td>❌ 否</td><td>❌ 否</td></tr><tr><td>Map</td><td>鍵值對（Key-Value）</td><td>✅ Key 不可重複</td><td>✅ 依實作而定</td></tr></tbody></table><hr><h1 id="類別：CollectionExample"><a href="#類別：CollectionExample" class="headerlink" title="類別：CollectionExample"></a>類別：CollectionExample</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        useList();</span><br><span class="line">        useSet();</span><br><span class="line">        useMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useList</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; fruits = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        fruits.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        fruits.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">        fruits.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String fruit : fruits) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[List] &quot;</span> + fruit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useSet</span><span class="params">()</span> &#123;</span><br><span class="line">        Set&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        names.add(<span class="string">&quot;Mendel&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;Mendel&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[Set] &quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useMap</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; scores = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        scores.put(<span class="string">&quot;Mendel&quot;</span>, <span class="number">90</span>);</span><br><span class="line">        scores.put(<span class="string">&quot;Alice&quot;</span>, <span class="number">85</span>);</span><br><span class="line">        scores.put(<span class="string">&quot;Mendel&quot;</span>, <span class="number">95</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key : scores.keySet()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[Map] &quot;</span> + key + <span class="string">&quot; 的成績是：&quot;</span> + scores.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="方法說明：useList"><a href="#方法說明：useList" class="headerlink" title="方法說明：useList()"></a>方法說明：useList()</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>儲存多筆資料（可重複、有順序）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useList</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; fruits = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    fruits.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">    fruits.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">    fruits.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String fruit : fruits) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[List] &quot;</span> + fruit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 2: 建立一個 <code>List</code> 物件並指定泛型為 <code>String</code></li><li>Line 3–5: 使用 <code>.add()</code> 增加元素（可重複）</li><li>Line 7: 使用 for-each 逐一輸出元素（保留順序）</li></ul><blockquote><p><strong>小提醒</strong><br><code>List</code> 用於有順序及可重覆的資料（如登入帳號清單、唯一分類…）</p></blockquote><hr><h2 id="方法說明：useSet"><a href="#方法說明：useSet" class="headerlink" title="方法說明：useSet()"></a>方法說明：useSet()</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>儲存唯一資料（不可重複、無順序）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useSet</span><span class="params">()</span> &#123;</span><br><span class="line">    Set&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    names.add(<span class="string">&quot;Mendel&quot;</span>);</span><br><span class="line">    names.add(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">    names.add(<span class="string">&quot;Mendel&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Set] &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 2: 使用 <code>HashSet</code> 建立集合（不可重複）</li><li>Line 3–5: 即使重複加入 “Mendel”，集合中仍只會保留一次</li><li>Line 7: 使用 for-each 走訪元素（不保證順序）</li></ul><blockquote><p><strong>小提醒</strong><br><code>Set</code> 用於唯一性需求的資料（如登入帳號清單、唯一分類…）</p></blockquote><hr><h2 id="方法說明：useMap"><a href="#方法說明：useMap" class="headerlink" title="方法說明：useMap()"></a>方法說明：useMap()</h2><h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><p>使用鍵值對（Key-Value）儲存資料，類似字典。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useMap</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Integer&gt; scores = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    scores.put(<span class="string">&quot;Mendel&quot;</span>, <span class="number">90</span>);</span><br><span class="line">    scores.put(<span class="string">&quot;Alice&quot;</span>, <span class="number">85</span>);</span><br><span class="line">    scores.put(<span class="string">&quot;Mendel&quot;</span>, <span class="number">95</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String key : scores.keySet()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Map] &quot;</span> + key + <span class="string">&quot; 的成績是：&quot;</span> + scores.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 2: 建立 <code>Map</code> 物件，key 為 <code>String</code>，value 為 <code>Integer</code></li><li>Line 3–5: 若對相同 key 多次 <code>.put()</code>，會覆蓋舊資料</li><li>Line 7: 使用 <code>.keySet()</code> 走訪所有 key，再透過 <code>.get()</code> 取得對應值</li></ul><blockquote><p><strong>小提醒</strong><br><code>Map</code> 常用於需要對應的資料（如帳號密碼、學號成績等結構…）</p></blockquote><hr><h1 id="本章練習題"><a href="#本章練習題" class="headerlink" title="本章練習題"></a>本章練習題</h1><ol><li><p>建立一個 <code>List&lt;Integer&gt;</code> 存入 <code>10, 20, 30, 10</code>，並印出所有元素與總和</p></li><li><p>建立一個 <code>Set&lt;String&gt;</code> 存入 <code>[&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;red&quot;]</code>，印出所有不重複顏色</p></li><li><p>建立一個 <code>Map&lt;String, String&gt;</code> 存入以下資料，並印出每個人最喜歡的顏色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Mendel&quot;</span> -&gt; <span class="string">&quot;Blue&quot;</span>  </span><br><span class="line"><span class="string">&quot;Alice&quot;</span> -&gt; <span class="string">&quot;Green&quot;</span>  </span><br><span class="line"><span class="string">&quot;Mendel&quot;</span> -&gt; <span class="string">&quot;Red&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>（加分題）寫一個方法 <code>countWords(List&lt;String&gt; list)</code> 統計每個單字出現次數，使用 <code>Map&lt;String, Integer&gt;</code> 回傳結果</p></li></ol><hr><h1 id="本章總結"><a href="#本章總結" class="headerlink" title="本章總結"></a>本章總結</h1><table><thead><tr><th>集合類型</th><th>是否重複</th><th>是否排序</th><th>實作類別</th><th>用途</th></tr></thead><tbody><tr><td>List</td><td>✅ 是</td><td>✅ 有順序</td><td>ArrayList</td><td>可重複列表，如購物車</td></tr><tr><td>Set</td><td>❌ 否</td><td>❌ 無順序</td><td>HashSet</td><td>唯一資料清單，如會員ID</td></tr><tr><td>Map</td><td>✅ Key唯一</td><td>✅ 有 key 取值</td><td>HashMap</td><td>對應關係，如學生成績表</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 05 陣列與巢狀迴圈</title>
      <link href="/2025/05/03/Java/java-05/"/>
      <url>/2025/05/03/Java/java-05/</url>
      
        <content type="html"><![CDATA[<h1 id="陣列與巢狀迴圈（Nested-Loop）"><a href="#陣列與巢狀迴圈（Nested-Loop）" class="headerlink" title="陣列與巢狀迴圈（Nested Loop）"></a>陣列與巢狀迴圈（Nested Loop）</h1><p>當資料從單一筆變成「多筆」，我們需要使用「陣列」來儲存、使用「迴圈」來處理。<br>本章學會的重點：</p><ul><li>一維陣列的宣告與遍歷</li><li>二維陣列與巢狀迴圈</li><li><code>for</code>、<code>for-each</code> 搭配陣列輸出</li><li>方法封裝資料處理邏輯（印出、加總、平均等）</li></ul><hr><h1 id="類別：ArrayLoopExample"><a href="#類別：ArrayLoopExample" class="headerlink" title="類別：ArrayLoopExample"></a>類別：ArrayLoopExample</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayLoopExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        printScores();</span><br><span class="line">        sumScores();</span><br><span class="line">        print2DTable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printScores</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] scores = &#123;<span class="number">80</span>, <span class="number">90</span>, <span class="number">70</span>, <span class="number">100</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[for] 第 &quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot; 筆成績：&quot;</span> + scores[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> score : scores) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[foreach] 成績：&quot;</span> + score);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sumScores</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] scores = &#123;<span class="number">80</span>, <span class="number">90</span>, <span class="number">70</span>, <span class="number">100</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> score : scores) &#123;</span><br><span class="line">            sum += score;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;總分：&quot;</span> + sum);</span><br><span class="line">        System.out.println(<span class="string">&quot;平均：&quot;</span> + (sum / (<span class="type">double</span>) scores.length));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print2DTable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] table = &#123;</span><br><span class="line">            &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; table.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; table[i].length; j++) &#123;</span><br><span class="line">                System.out.print(table[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="方法說明：printScores"><a href="#方法說明：printScores" class="headerlink" title="方法說明：printScores()"></a>方法說明：printScores()</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>輸出一維陣列資料，使用 <code>for</code> 與 <code>for-each</code> 做對照。</p><h3 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 1: 「套件」（package）→請參考 Java 01.簡介</li><li>Line 3: 「類別」（class）→請參考 Java 01.簡介</li><li>Line 5: 「主方法」（main）→請參考 Java 01.簡介</li><li>Line 10: 宣告整數陣列 <code>scores</code></li><li>Line 11-13: 傳統 for 迴圈搭配索引遍歷陣列</li><li>Line 14-16: 使用 for-each 更簡潔地走訪每一個元素</li></ul><hr><h2 id="方法說明：sumScores"><a href="#方法說明：sumScores" class="headerlink" title="方法說明：sumScores()"></a>方法說明：sumScores()</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>計算一維陣列的總和與平均。</p><h3 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 18: 宣告整數陣列 <code>scores</code></li><li>Line 19: 宣告加總變數 <code>sum</code></li><li>Line 20-22: 使用 for-each 將每筆成績加入 <code>sum</code></li><li>Line 23-24: 輸出總和與平均值（需轉型為 <code>double</code>）</li></ul><hr><h2 id="方法說明：print2DTable"><a href="#方法說明：print2DTable" class="headerlink" title="方法說明：print2DTable()"></a>方法說明：print2DTable()</h2><h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><p>使用巢狀 for 迴圈，印出二維陣列的內容。</p><h3 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 26: 宣告一個二維整數陣列 <code>table</code></li><li>Line 30-31: 外層 for 控制列，內層 for 控制行</li><li>Line 32: 使用 <code>print()</code> 讓數字同列顯示</li><li>Line 33: 換行處理換列</li></ul><hr><h1 id="本章練習題"><a href="#本章練習題" class="headerlink" title="本章練習題"></a>本章練習題</h1><ol><li><p>請使用 <code>for</code> 輸出陣列 <code>&#123;1, 2, 3, 4, 5&#125;</code> 中的所有奇數</p></li><li><p>使用 <code>for-each</code> 遍歷陣列，並輸出所有小於 60 的成績（不及格）</p></li><li><p>宣告二維陣列如下，計算每一列的加總</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>（加分題）請設計一個方法 <code>sum2D(int[][] array)</code>，回傳二維陣列所有值的總和</p></li></ol><hr><h1 id="本章教學總結"><a href="#本章教學總結" class="headerlink" title="本章教學總結"></a>本章教學總結</h1><table><thead><tr><th>技能</th><th>關鍵語法</th><th>適用場景</th></tr></thead><tbody><tr><td>宣告陣列</td><td><code>int[] a = &#123;&#125;</code></td><td>儲存多筆資料</td></tr><tr><td>for 迴圈</td><td><code>for (int i = 0; i &lt; a.length; i++)</code></td><td>控制索引輸出</td></tr><tr><td>for-each</td><td><code>for (int n : a)</code></td><td>簡潔遍歷，不需索引</td></tr><tr><td>巢狀 for</td><td><code>for () &#123; for () &#123; ... &#125; &#125;</code></td><td>處理二維資料如表格</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程式設計 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 04 迴圈控制：for、while、do-while、for-each 整合</title>
      <link href="/2025/05/03/Java/java-04/"/>
      <url>/2025/05/03/Java/java-04/</url>
      
        <content type="html"><![CDATA[<h1 id="認識迴圈控制（Loop）"><a href="#認識迴圈控制（Loop）" class="headerlink" title="認識迴圈控制（Loop）"></a>認識迴圈控制（Loop）</h1><p>當我們需要重複執行某段邏輯時，就會使用<strong>迴圈（Loop）</strong>來處理。<br>Java 提供四種常見迴圈語法：</p><table><thead><tr><th>類型</th><th>用途</th><th>特性</th></tr></thead><tbody><tr><td><code>for</code></td><td>次數已知的重複</td><td>適合計數型迴圈</td></tr><tr><td><code>while</code></td><td>條件為真的重複</td><td>先判斷，後執行</td></tr><tr><td><code>do-while</code></td><td>至少執行一次</td><td>先執行，後判斷</td></tr><tr><td><code>for-each</code></td><td>用於遍歷陣列或集合</td><td>更簡潔，不可用於索引控制</td></tr></tbody></table><h1 id="迴圈整合設計：LoopExample-類別"><a href="#迴圈整合設計：LoopExample-類別" class="headerlink" title="迴圈整合設計：LoopExample 類別"></a>迴圈整合設計：LoopExample 類別</h1><p>以下將建立一個 <code>LoopExample</code> 類別，裡面包含四個方法，分別演示不同迴圈語法：</p><ul><li><code>forLoop()</code></li><li><code>whileLoop()</code></li><li><code>doWhileLoop()</code></li><li><code>forEachLoop()</code></li></ul><h2 id="完整範例"><a href="#完整範例" class="headerlink" title="完整範例"></a>完整範例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoopExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        forLoop();</span><br><span class="line">        whileLoop();</span><br><span class="line">        doWhileLoop();</span><br><span class="line">        forEachLoop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forLoop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[for] 第 &quot;</span> + i + <span class="string">&quot; 次&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">whileLoop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[while] 倒數：&quot;</span> + i);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doWhileLoop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[do-while] 這行一定會執行一次&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &gt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachLoop</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] langs = &#123;<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C++&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String lang : langs) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[foreach] 語言：&quot;</span> + lang);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="forLoop"><a href="#forLoop" class="headerlink" title="forLoop()"></a>forLoop()</h2><h3 id="功能說明"><a href="#功能說明" class="headerlink" title="功能說明"></a>功能說明</h3><p>使用 <code>for</code> 迴圈執行 1~5 次，適合用於明確知道執行次數的情境。 for 由三部分組成：初始值、條件、遞增&#x2F;遞減邏輯。</p><h3 id="程式片段"><a href="#程式片段" class="headerlink" title="程式片段"></a>程式片段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forLoop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[for] 第 &quot;</span> + i + <span class="string">&quot; 次&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="whileLoop"><a href="#whileLoop" class="headerlink" title="whileLoop()"></a>whileLoop()</h2><h3 id="功能說明-1"><a href="#功能說明-1" class="headerlink" title="功能說明"></a>功能說明</h3><p>使用 <code>while</code> 倒數 5 次，條件為真就持續執行。</p><h3 id="程式片段-1"><a href="#程式片段-1" class="headerlink" title="程式片段"></a>程式片段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">whileLoop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[while] 倒數：&quot;</span> + i);</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="doWhileLoop"><a href="#doWhileLoop" class="headerlink" title="doWhileLoop()"></a>doWhileLoop()</h2><h3 id="功能說明-2"><a href="#功能說明-2" class="headerlink" title="功能說明"></a>功能說明</h3><p>使用 <code>do-while</code>，即使條件一開始為 false，也會先執行一次。</p><h3 id="程式片段-2"><a href="#程式片段-2" class="headerlink" title="程式片段"></a>程式片段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doWhileLoop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[do-while] 這行一定會執行一次&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="forEachLoop"><a href="#forEachLoop" class="headerlink" title="forEachLoop()"></a>forEachLoop()</h2><h3 id="功能說明-3"><a href="#功能說明-3" class="headerlink" title="功能說明"></a>功能說明</h3><p>走訪陣列 <code>String[]</code>，用 for-each 逐一輸出每個元素內容。適合用於遍歷資料集合。</p><h3 id="程式片段-3"><a href="#程式片段-3" class="headerlink" title="程式片段"></a>程式片段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachLoop</span><span class="params">()</span> &#123;</span><br><span class="line">    String[] langs = &#123;<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C++&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (String lang : langs) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[foreach] 語言：&quot;</span> + lang);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="本章練習題（整合應用）"><a href="#本章練習題（整合應用）" class="headerlink" title="本章練習題（整合應用）"></a>本章練習題（整合應用）</h1><ol><li>修改 <code>forLoop()</code>，使其只輸出偶數次數</li><li>修改 <code>whileLoop()</code>，讓它從 10 倒數到 1，且每次輸出時多印出累加總和</li><li>在 <code>doWhileLoop()</code> 中加入使用者輸入密碼的驗證（搭配 Scanner）</li><li>將 <code>forEachLoop()</code> 改為輸出陣列長度與元素順序編號（ex: 第1個語言：Java）</li><li>（加分題）新增 <code>sumBetween(int start, int end)</code>，使用任一迴圈回傳區間總和</li></ol><blockquote><p><strong>提示</strong><br>每個方法可獨立練習與驗證，<code>main()</code> 中可選擇呼叫順序。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程式設計 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 03-2 條件判斷與邏輯運算（二）Switch語法</title>
      <link href="/2025/05/01/Java/java-03-2/"/>
      <url>/2025/05/01/Java/java-03-2/</url>
      
        <content type="html"><![CDATA[<h1 id="認識-switch-條件結構"><a href="#認識-switch-條件結構" class="headerlink" title="認識 switch 條件結構"></a>認識 switch 條件結構</h1><p>當我們要根據<strong>單一條件值</strong>對應多種輸出時，<code>switch</code> 是比連續 <code>if-else</code> 更直覺的寫法。<br>JDK 21 新增的 <code>switch expression</code> 更可直接產生回傳值，讓語法更簡潔有力。</p><hr><h1 id="傳統-switch-寫法"><a href="#傳統-switch-寫法" class="headerlink" title="傳統 switch 寫法"></a>傳統 switch 寫法</h1><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TraditionalSwitchExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        String result;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                result = <span class="string">&quot;星期一&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                result = <span class="string">&quot;星期二&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                result = <span class="string">&quot;星期三&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                result = <span class="string">&quot;其他&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;今天是：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 「套件」（package）→請參考 Java 01.簡介</li><li>Line 3: 「類別」（class）→請參考 Java 01.簡介</li><li>Line 4: 「主方法」（main）→請參考 Java 01.簡介</li><li>Line 5: 宣告整數變數 <code>day</code></li><li>Line 6: 宣告儲存結果的變數 <code>result</code></li><li>Line 8-17: 傳統 switch 結構，每個 <code>case</code> 結尾需 <code>break</code> 防止落入下一個</li><li>Line 19: 輸出結果</li></ul><hr><h1 id="switch-expression（JDK-21）"><a href="#switch-expression（JDK-21）" class="headerlink" title="switch expression（JDK 21）"></a>switch expression（JDK 21）</h1><p>Java 21 支援 <strong>switch expression</strong> 語法，不再需要 <code>break</code>，可直接將 switch 結果指派給變數或回傳。</p><h2 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchExpressionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dayName</span> <span class="operator">=</span> getDayName(day);</span><br><span class="line">        System.out.println(<span class="string">&quot;今天是：&quot;</span> + dayName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDayName</span><span class="params">(<span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; <span class="string">&quot;星期一&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; <span class="string">&quot;星期二&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span> -&gt; <span class="string">&quot;星期三&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span> -&gt; <span class="string">&quot;星期四&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span> -&gt; <span class="string">&quot;星期五&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span> -&gt; <span class="string">&quot;週末&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="string">&quot;未知&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1~3: →請參考 Java 01.簡介</li><li>Line 4: 「主方法」（main）→請參考 Java 01.簡介</li><li>Line 5: 輸入星期數字</li><li>Line 6: 呼叫 <code>getDayName()</code> 並取得回傳值</li><li>Line 9: 定義方法，輸入整數 <code>day</code>，回傳對應的中文星期</li><li>Line 10-17: 使用 switch expression 配合箭頭語法 <code>-&gt;</code></li></ul><blockquote><h3 id="小提醒：為什麼要用方法？"><a href="#小提醒：為什麼要用方法？" class="headerlink" title="小提醒：為什麼要用方法？"></a>小提醒：為什麼要用方法？</h3><p>將 switch 邏輯獨立成方法，可以讓主程式更清楚、可重複使用，也方便單元測試與維護。</p></blockquote><hr><h1 id="綜合範例：月份對應季節"><a href="#綜合範例：月份對應季節" class="headerlink" title="綜合範例：月份對應季節"></a>綜合範例：月份對應季節</h1><h2 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeasonExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UNKNOWN</span> <span class="operator">=</span> <span class="string">&quot;未知季節&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">season</span> <span class="operator">=</span> getSeason(month);</span><br><span class="line">        System.out.println(<span class="string">&quot;月份：&quot;</span> + month);</span><br><span class="line">        System.out.println(<span class="string">&quot;季節：&quot;</span> + season);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSeason</span><span class="params">(<span class="type">int</span> month)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; <span class="string">&quot;春&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> -&gt; <span class="string">&quot;夏&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span> -&gt; <span class="string">&quot;秋&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>, <span class="number">1</span>, <span class="number">2</span> -&gt; <span class="string">&quot;冬&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; UNKNOWN;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1~3: →請參考 Java 01.簡介</li><li>Line 4: 宣告常數 <code>UNKNOWN</code> 為預設回傳值</li><li>Line 6: 「主方法」（main）→請參考 Java 01.簡介</li><li>Line 7: 使用者輸入月份（這裡寫死為 4）</li><li>Line 8: 呼叫 <code>getSeason()</code> 方法並取得結果</li><li>Line 11: 定義方法，輸入整數 <code>month</code>，回傳字串</li><li>Line 12-17: 對應不同月份回傳季節（含合併條件）</li></ul><hr><h1 id="本章練習題"><a href="#本章練習題" class="headerlink" title="本章練習題"></a>本章練習題</h1><ol><li><p>撰寫 <code>getDayName(int)</code> 方法，輸入 1~7 回傳「星期一」到「星期日」，否則回傳「未知」</p></li><li><p>撰寫 <code>getSeason(int)</code> 方法，根據月份輸出「春夏秋冬」，錯誤數字回傳「未知季節」</p></li><li><p>將職位轉換為薪資等級：</p><ul><li>“Intern” → “Level 1”</li><li>“Engineer” → “Level 2”</li><li>“Manager” → “Level 3”</li><li>其他 → “Unknown”</li></ul></li><li><p>（加分題）使用 <code>Scanner</code> 輸入月份，呼叫 <code>getSeason()</code> 並印出季節</p></li></ol><blockquote><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>練習將條件封裝進方法中，並讓主程式保持簡潔與易讀性。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程式設計 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 03 條件判斷與邏輯運算（一）if、邏輯運算與方法</title>
      <link href="/2025/05/01/Java/java-03/"/>
      <url>/2025/05/01/Java/java-03/</url>
      
        <content type="html"><![CDATA[<h1 id="認識條件判斷"><a href="#認識條件判斷" class="headerlink" title="認識條件判斷"></a>認識條件判斷</h1><p>程式運作常會依據<strong>條件結果</strong>來決定流程走向。<br>本章會介紹：</p><ul><li><code>if</code>, <code>else if</code>, <code>else</code> 的基本使用</li><li>邏輯運算子（布林邏輯）</li><li>巢狀條件結構（Nested if）</li><li>方法（Method）的定義與呼叫方式（含 Signature）</li></ul><hr><h1 id="if、else-if、else-條件結構"><a href="#if、else-if、else-條件結構" class="headerlink" title="if、else if、else 條件結構"></a>if、else if、else 條件結構</h1><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;優秀！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;及格！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不及格！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 「套件」（package）→請參考 Java 01.簡介</li><li>Line 3: 「類別」（class）→請參考 Java 01.簡介</li><li>Line 4: 「主方法」（main）→請參考 Java 01.簡介</li><li>Line 5: 宣告一個整數變數 <code>score</code></li><li>Line 7-13: 根據條件，執行對應的輸出內容</li></ul><hr><h1 id="邏輯運算子（Boolean-Operators）"><a href="#邏輯運算子（Boolean-Operators）" class="headerlink" title="邏輯運算子（Boolean Operators）"></a>邏輯運算子（Boolean Operators）</h1><p>在多條件情境下，我們可以使用邏輯運算子結合判斷：</p><table><thead><tr><th>運算子</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>且（AND）</td><td><code>a &gt; 0 &amp;&amp; b &gt; 0</code></td></tr><tr><td>&#96;</td><td></td><td>&#96;</td></tr><tr><td><code>!</code></td><td>非（NOT）</td><td><code>!(a &gt; 0)</code></td></tr></tbody></table><h2 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogicalExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasLicense</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">18</span> &amp;&amp; hasLicense) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;可以開車！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;無法開車！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 「套件」（package）→請參考 Java 01.簡介</li><li>Line 3: 「類別」（class）→請參考 Java 01.簡介</li><li>Line 4: 「主方法」（main）→請參考 Java 01.簡介</li><li>Line 5-6: 宣告整數與布林變數</li><li>Line 8-12: 結合 <code>&amp;&amp;</code> 運算，兩條件都成立才顯示可開車</li></ul><hr><h1 id="巢狀-if-結構（Nested-if）"><a href="#巢狀-if-結構（Nested-if）" class="headerlink" title="巢狀 if 結構（Nested if）"></a>巢狀 if 結構（Nested if）</h1><h2 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NestedIfExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">19</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isStudent</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isStudent) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成年人（學生）&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成年人（非學生）&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1~4: 請參考上方說明</li><li>Line 5-6: 設定條件變數</li><li>Line 8-14: 外層判斷成年與否，內層再依據學生身分細分</li></ul><hr><h1 id="方法（Method）的定義與使用"><a href="#方法（Method）的定義與使用" class="headerlink" title="方法（Method）的定義與使用"></a>方法（Method）的定義與使用</h1><p><strong>方法（Method）</strong>是封裝邏輯、增加可重複使用性的單位。<br>每個方法都有其<strong>簽章（Signature）</strong>，包含：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[存取修飾子] [<span class="keyword">static</span>] 回傳型別 方法名稱(參數...)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">gradeText</span><span class="params">(<span class="type">int</span> score)</span></span><br></pre></td></tr></table></figure><p>表示這是一個公開靜態方法，輸入整數 <code>score</code>，回傳字串。</p><h2 id="範例：方法封裝成績評語"><a href="#範例：方法封裝成績評語" class="headerlink" title="範例：方法封裝成績評語"></a>範例：方法封裝成績評語</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">78</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> getGrade(score);</span><br><span class="line">        System.out.println(<span class="string">&quot;成績評語：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getGrade</span><span class="params">(<span class="type">int</span> score)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) <span class="keyword">return</span> <span class="string">&quot;D&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;F&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-3"><a href="#說明-3" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1~4: 請參考前述</li><li>Line 5: 宣告整數變數 <code>score</code></li><li>Line 6: 呼叫 <code>getGrade()</code> 方法並接收回傳值</li><li>Line 8: 印出評語</li><li>Line 10-16: 方法 <code>getGrade()</code> 根據成績輸出字母等級</li></ul><hr><h1 id="本章練習題"><a href="#本章練習題" class="headerlink" title="本章練習題"></a>本章練習題</h1><ol><li><p>請撰寫一段程式碼，輸入分數後依下列規則印出：</p><ul><li>90~100：A</li><li>80~89：B</li><li>70~79：C</li><li>60~69：D</li><li>未滿60：F</li></ul></li><li><p>建立一個方法 <code>isAdult(int age)</code>，回傳布林值，表示是否為成年人（18歲以上）</p></li><li><p>建立一個方法 <code>canDrive(int age, boolean hasLicense)</code>，依條件回傳 <code>true/false</code> 表示是否能合法開車</p></li><li><p>（加分題）建立方法 <code>getHealthStatus(double bmi)</code>，依 BMI 值回傳：</p><ul><li>&lt;18.5：過輕</li><li>18.5~24：正常</li><li><blockquote><p>24：過重</p></blockquote></li></ul></li></ol><blockquote><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>所有方法請用 <code>public static</code>，方便在 <code>main()</code> 中直接呼叫。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程式設計 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 02-2 字串處理：String 與 StringBuilder</title>
      <link href="/2025/05/01/Java/java-02-2/"/>
      <url>/2025/05/01/Java/java-02-2/</url>
      
        <content type="html"><![CDATA[<h1 id="認識-Java-字串（String）"><a href="#認識-Java-字串（String）" class="headerlink" title="認識 Java 字串（String）"></a>認識 Java 字串（String）</h1><p>在 Java 中，<code>String</code> 是一種常用的參考型別（Reference Type），代表文字資料。<br>使用雙引號 <code>&quot;</code> 包住的資料都是字串，例如 <code>&quot;Hello&quot;</code>、<code>&quot;123&quot;</code>。</p><hr><h1 id="類別：StringExample"><a href="#類別：StringExample" class="headerlink" title="類別：StringExample"></a>類別：StringExample</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        basicString();</span><br><span class="line">        compareString();</span><br><span class="line">        convertString();</span><br><span class="line">        useStringBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">basicString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Mendel&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">        System.out.println(<span class="string">&quot;[basic] &quot;</span> + greeting);</span><br><span class="line">        System.out.println(<span class="string">&quot;[basic] 長度：&quot;</span> + name.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;[basic] 第一個字元：&quot;</span> + name.charAt(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">compareString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[compare] 相等內容：&quot;</span> + a.equals(b));</span><br><span class="line">        System.out.println(<span class="string">&quot;[compare] 是否同個物件：&quot;</span> + (a == b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">convertString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> String.valueOf(number);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> String.valueOf(pi);</span><br><span class="line">        <span class="type">int</span> <span class="variable">parsed</span> <span class="operator">=</span> Integer.parseInt(text);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[convert] int 轉字串：&quot;</span> + s1);</span><br><span class="line">        System.out.println(<span class="string">&quot;[convert] double 轉字串：&quot;</span> + s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;[convert] 字串轉 int：&quot;</span> + (parsed + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useStringBuilder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;StringBuilder&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;[builder] 結果：&quot;</span> + sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="方法說明：basicString"><a href="#方法說明：basicString" class="headerlink" title="方法說明：basicString()"></a>方法說明：basicString()</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>基本字串操作：長度、連接、字元讀取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">basicString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Mendel&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">System.out.println(<span class="string">&quot;[basic] &quot;</span> + greeting);</span><br><span class="line">System.out.println(<span class="string">&quot;[basic] 長度：&quot;</span> + name.length());</span><br><span class="line">System.out.println(<span class="string">&quot;[basic] 第一個字元：&quot;</span> + name.charAt(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 2: 建立 <code>String</code> 變數 <code>name</code></li><li>Line 3: 使用 <code>+</code> 連接字串</li><li>Line 4: 輸出字串</li><li>Line 5: 使用 <code>.length()</code> 計算長度</li><li>Line 6: 使用 <code>.charAt(0)</code> 取得第一個字元</li></ul><hr><h2 id="方法說明：compareString"><a href="#方法說明：compareString" class="headerlink" title="方法說明：compareString()"></a>方法說明：compareString()</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>比較字串內容與記憶體參考。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">compareString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;[compare] 相等內容：&quot;</span> + a.equals(b));</span><br><span class="line">System.out.println(<span class="string">&quot;[compare] 是否同個物件：&quot;</span> + (a == b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 2: <code>a</code> 為常數池中的字串物件</li><li>Line 3: <code>b</code> 使用 <code>new</code> 建立新物件，內容相同但記憶體不同</li><li>Line 5: 使用 <code>.equals()</code> 比較<strong>內容</strong></li><li>Line 6: 使用 <code>==</code> 比較<strong>記憶體位置（參考）</strong></li></ul><hr><h2 id="方法說明：convertString"><a href="#方法說明：convertString" class="headerlink" title="方法說明：convertString()"></a>方法說明：convertString()</h2><h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><p>進行基本型別與字串間的轉換。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">convertString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> String.valueOf(number);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> String.valueOf(pi);</span><br><span class="line"><span class="type">int</span> <span class="variable">parsed</span> <span class="operator">=</span> Integer.parseInt(text);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;[convert] int 轉字串：&quot;</span> + s1);</span><br><span class="line">System.out.println(<span class="string">&quot;[convert] double 轉字串：&quot;</span> + s2);</span><br><span class="line">System.out.println(<span class="string">&quot;[convert] 字串轉 int：&quot;</span> + (parsed + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 2~4: 整數、浮點數與字串</li><li>Line 6~7: 使用 <code>String.valueOf()</code> 將數值轉為字串</li><li>Line 8: 使用 <code>Integer.parseInt()</code> 將字串轉回整數</li></ul><hr><h2 id="方法說明：useStringBuilder"><a href="#方法說明：useStringBuilder" class="headerlink" title="方法說明：useStringBuilder()"></a>方法說明：useStringBuilder()</h2><h3 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h3><p>介紹使用 <code>StringBuilder</code> 進行多次字串拼接，效能較佳。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useStringBuilder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;StringBuilder&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;[builder] 結果：&quot;</span> + sb.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="說明-3"><a href="#說明-3" class="headerlink" title="說明"></a>說明</h3><ul><li>Line 2: 建立 <code>StringBuilder</code> 物件</li><li>Line 3~5: 多次使用 <code>.append()</code> 拼接字串</li><li>Line 6: 使用 <code>.toString()</code> 取得完整結果</li></ul><blockquote><p><strong>小提醒</strong><br>如果在迴圈中頻繁操作字串，建議使用 <code>StringBuilder</code>，效率比 <code>+</code> 快很多。</p></blockquote><hr><h1 id="本章練習題"><a href="#本章練習題" class="headerlink" title="本章練習題"></a>本章練習題</h1><ol><li><p>請宣告兩個字串 <code>s1 = &quot;Hello&quot;</code>、<code>s2 = &quot;World&quot;</code>，將它們用三種方式合併輸出：</p><ul><li>使用 <code>+</code></li><li>使用 <code>concat()</code></li><li>使用 <code>StringBuilder</code></li></ul></li><li><p>使用 <code>.length()</code> 與 <code>.charAt()</code> 輸出你名字的字數與前三個字元</p></li><li><p>宣告一個字串 <code>&quot;2025&quot;</code>，轉換成整數後加 5 並輸出結果</p></li><li><p>宣告一個字串 <code>&quot;HELLO&quot;</code>，轉成小寫並輸出（提示：<code>.toLowerCase()</code>）</p></li><li><p>（加分題）撰寫方法 <code>isEqualIgnoreCase(String a, String b)</code>，比較兩字串是否忽略大小寫後相等</p></li></ol><hr><h1 id="本章總結"><a href="#本章總結" class="headerlink" title="本章總結"></a>本章總結</h1><table><thead><tr><th>功能</th><th>方法 &#x2F; 操作</th><th>範例</th></tr></thead><tbody><tr><td>字串連接</td><td><code>+</code>, <code>concat()</code></td><td><code>&quot;A&quot; + &quot;B&quot;</code></td></tr><tr><td>長度 &#x2F; 位置</td><td><code>.length()</code>, <code>.charAt(i)</code></td><td><code>s.charAt(0)</code></td></tr><tr><td>比較</td><td><code>.equals()</code>, <code>==</code>, <code>.equalsIgnoreCase()</code></td><td></td></tr><tr><td>轉換</td><td><code>String.valueOf()</code>, <code>Integer.parseInt()</code></td><td></td></tr><tr><td>拼接最佳化</td><td><code>StringBuilder</code> + <code>.append()</code></td><td><code>sb.append(&quot;text&quot;)</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 字串處理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 02 基本語法：變數、常數與資料型態</title>
      <link href="/2025/05/01/Java/java-02/"/>
      <url>/2025/05/01/Java/java-02/</url>
      
        <content type="html"><![CDATA[<h1 id="認識基本語法"><a href="#認識基本語法" class="headerlink" title="認識基本語法"></a>認識基本語法</h1><p>本章節將學習以下主題：</p><ul><li>變數與常數的宣告方式</li><li>Java 資料型態分類</li><li>區域與全域變數的差異</li><li>常見存取修飾子（Access Modifiers）</li></ul><hr><h1 id="變數（Variable）"><a href="#變數（Variable）" class="headerlink" title="變數（Variable）"></a>變數（Variable）</h1><p>變數是用來儲存資料的命名空間，必須先宣告型別。<br>Java 中變數也有<strong>作用範圍（Scope）</strong>與<strong>存取權限（Access Level）</strong>的概念。</p><h2 id="範例：區域變數"><a href="#範例：區域變數" class="headerlink" title="範例：區域變數"></a>範例：區域變數</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">175.5</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isStudent</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Mendel&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年齡：&quot;</span> + age);</span><br><span class="line">        System.out.println(<span class="string">&quot;身高：&quot;</span> + height);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否為學生：&quot;</span> + isStudent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 「套件」（package）→請參考 Java 01.簡介</li><li>Line 3: 「類別」（class）→請參考 Java 01.簡介</li><li>Line 4: 「主方法」（main）→請參考 Java 01.簡介</li><li>Line 5-8: 宣告區域變數（僅在 main 方法內有效）</li><li>Line 10-13: 使用變數輸出資訊</li></ul><hr><h1 id="Global-vs-Local-變數"><a href="#Global-vs-Local-變數" class="headerlink" title="Global vs Local 變數"></a>Global vs Local 變數</h1><table><thead><tr><th>類型</th><th>宣告位置</th><th>作用範圍</th><th>是否需初始化</th><th>常見用途</th></tr></thead><tbody><tr><td>區域變數 (Local)</td><td>方法或區塊內</td><td>只能在該區塊使用</td><td>必須初始化</td><td>計算用、短暫記錄</td></tr><tr><td>成員變數 (Global)</td><td>類別中、方法外</td><td>整個類別中可用</td><td>有預設值</td><td>物件屬性、常數</td></tr></tbody></table><h2 id="範例：全域變數"><a href="#範例：全域變數" class="headerlink" title="範例：全域變數"></a>範例：全域變數</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScopeExample</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">schoolName</span> <span class="operator">=</span> <span class="string">&quot;Mendel College&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">student</span> <span class="operator">=</span> <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;學校名稱：&quot;</span> + schoolName);</span><br><span class="line">        System.out.println(<span class="string">&quot;學生：&quot;</span> + student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 「套件」（package）→請參考 Java 01.簡介</li><li>Line 3: 「類別」（class）→請參考 Java 01.簡介</li><li>Line 4: 宣告全域變數 <code>schoolName</code>，<code>static</code> 讓它不需建立物件即可使用</li><li>Line 6-8: 宣告區域變數、並輸出兩者結果</li></ul><hr><h1 id="存取修飾子（Access-Modifiers）"><a href="#存取修飾子（Access-Modifiers）" class="headerlink" title="存取修飾子（Access Modifiers）"></a>存取修飾子（Access Modifiers）</h1><p>在 Java 中，變數與方法都可以設定不同的存取權限，決定外部是否可存取。</p><table><thead><tr><th>修飾子</th><th>說明</th><th>使用範圍</th></tr></thead><tbody><tr><td><code>public</code></td><td>完全開放</td><td>任意類別皆可使用</td></tr><tr><td><code>protected</code></td><td>類別與子類別共享</td><td>包含 package 與繼承</td></tr><tr><td><em>(無修飾詞)</em></td><td>預設（default）</td><td>僅限同一個 package</td></tr><tr><td><code>private</code></td><td>完全封閉</td><td>僅限當前類別中使用</td></tr></tbody></table><h2 id="小提醒：變數範例"><a href="#小提醒：變數範例" class="headerlink" title="小提醒：變數範例"></a>小提醒：變數範例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModifierExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;公開變數&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="variable">isMember</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">note</span> <span class="operator">=</span> <span class="string">&quot;package可見&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="常數（Constant）"><a href="#常數（Constant）" class="headerlink" title="常數（Constant）"></a>常數（Constant）</h1><p>若變數值需固定不可變，則可使用 <code>final</code>。<br>而若常數需被整個專案共用，會使用 <strong><code>public static final</code></strong> 宣告於類別中。</p><h2 id="範例：宣告全域常數"><a href="#範例：宣告全域常數" class="headerlink" title="範例：宣告全域常數"></a>範例：宣告全域常數</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;圓周率：&quot;</span> + PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 「套件」（package）→請參考 Java 01.簡介</li><li>Line 3: 「類別」（class）→請參考 Java 01.簡介</li><li>Line 4: 宣告常數，使用 <code>public static final</code> 修飾，可供外部存取、不可變</li><li>Line 6: 「主方法」（main）→請參考 Java 01.簡介</li><li>Line 7: 輸出常數</li></ul><blockquote><h3 id="小提醒：常數命名"><a href="#小提醒：常數命名" class="headerlink" title="小提醒：常數命名"></a>小提醒：常數命名</h3><p>建議使用全大寫 + 底線（如：<code>MAX_SPEED</code>, <code>PI_VALUE</code>）</p></blockquote><hr><h1 id="資料型態（Data-Types）"><a href="#資料型態（Data-Types）" class="headerlink" title="資料型態（Data Types）"></a>資料型態（Data Types）</h1><p>Java 資料型態分為兩大類：</p><table><thead><tr><th>類型</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td>基本型別（Primitive）</td><td>儲存基本數值</td><td><code>int</code>, <code>double</code>, <code>boolean</code>, <code>char</code></td></tr><tr><td>參考型別（Reference）</td><td>儲存物件參考</td><td><code>String</code>, 陣列, 自訂類別</td></tr></tbody></table><h2 id="小整理：基本型別對照表"><a href="#小整理：基本型別對照表" class="headerlink" title="小整理：基本型別對照表"></a>小整理：基本型別對照表</h2><table><thead><tr><th>型別</th><th>大小</th><th>範例</th></tr></thead><tbody><tr><td>byte</td><td>1 byte</td><td><code>byte b = 10;</code></td></tr><tr><td>short</td><td>2 bytes</td><td><code>short s = 1000;</code></td></tr><tr><td>int</td><td>4 bytes</td><td><code>int i = 100000;</code></td></tr><tr><td>long</td><td>8 bytes</td><td><code>long l = 10000000000L;</code></td></tr><tr><td>float</td><td>4 bytes（小數）</td><td><code>float f = 3.14f;</code></td></tr><tr><td>double</td><td>8 bytes（更高精度）</td><td><code>double d = 3.14159;</code></td></tr><tr><td>char</td><td>2 bytes（Unicode）</td><td><code>char c = &#39;A&#39;;</code></td></tr><tr><td>boolean</td><td>1 bit（true&#x2F;false）</td><td><code>boolean flag = true;</code></td></tr></tbody></table><hr><h1 id="綜合範例"><a href="#綜合範例" class="headerlink" title="綜合範例"></a>綜合範例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataTypePractice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SCHOOL_NAME</span> <span class="operator">=</span> <span class="string">&quot;Mendel College&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">studentName</span> <span class="operator">=</span> <span class="string">&quot;Mendel&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">birthYear</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CURRENT_YEAR</span> <span class="operator">=</span> <span class="number">2025</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> CURRENT_YEAR - birthYear;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isAdult</span> <span class="operator">=</span> age &gt;= <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;學生：&quot;</span> + studentName);</span><br><span class="line">        System.out.println(<span class="string">&quot;學校：&quot;</span> + SCHOOL_NAME);</span><br><span class="line">        System.out.println(<span class="string">&quot;年齡：&quot;</span> + age);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否成年：&quot;</span> + isAdult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-3"><a href="#說明-3" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 「套件」（package）→請參考 Java 01.簡介</li><li>Line 3: 「類別」（class）→請參考 Java 01.簡介</li><li>Line 4: 宣告全域常數 <code>SCHOOL_NAME</code></li><li>Line 6: 「主方法」（main）→請參考 Java 01.簡介</li><li>Line 7-10: 使用變數、常數與基本運算邏輯</li><li>Line 12-15: 印出所有資訊</li></ul><hr><h1 id="本章練習題"><a href="#本章練習題" class="headerlink" title="本章練習題"></a>本章練習題</h1><ol><li><p>宣告三個變數，分別代表：</p><ul><li>姓名（String）</li><li>年齡（int）</li><li>是否為學生（boolean）</li></ul></li><li><p>宣告常數 <code>COUNTRY</code> 並賦值你最喜歡的國家<br>將其設為 <code>public static final</code></p></li><li><p>建立一個類別變數 <code>schoolName</code> 並在 <code>main()</code> 中輸出它（用 <code>static</code>）</p></li><li><p>建立一個全域變數為 <code>int MAX_SCORE = 100</code>，然後在 <code>main()</code> 使用它輸出格式化成績</p></li><li><p>（加分題）創建一個類別，包含：</p><ul><li>一個 <code>private</code> 的整數變數 <code>score</code></li><li>一個 <code>public</code> 的方法 <code>printScore()</code> 印出該變數</li></ul></li></ol><blockquote><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>嘗試組合使用：<code>public</code> &#x2F; <code>private</code>、<code>static</code>、<code>final</code>、與不同作用範圍的變數。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程式設計 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 01-2 簡介（二）輸入：使用 Scanner 接收使用者輸入</title>
      <link href="/2025/05/01/Java/java-01-2/"/>
      <url>/2025/05/01/Java/java-01-2/</url>
      
        <content type="html"><![CDATA[<h1 id="認識輸入（Input）"><a href="#認識輸入（Input）" class="headerlink" title="認識輸入（Input）"></a>認識輸入（Input）</h1><p>在前一章中，我們已經學會如何用 <code>System.out.println</code> 將文字輸出到螢幕。<br>這一篇要進一步學習：<strong>如何接收使用者輸入</strong>，讓程式更有互動性。</p><p>Java 中常用的輸入工具是 <code>Scanner</code> 類別，它可以從 <code>System.in</code> 讀取鍵盤輸入。</p><hr><h1 id="使用-Scanner"><a href="#使用-Scanner" class="headerlink" title="使用 Scanner"></a>使用 Scanner</h1><h2 id="範例：讀取文字輸入"><a href="#範例：讀取文字輸入" class="headerlink" title="範例：讀取文字輸入"></a>範例：讀取文字輸入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  <span class="comment">// 建立 Scanner 物件</span></span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;請輸入您的名字：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();          <span class="comment">// 讀取一整行文字</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;你好，&quot;</span> + name + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 「套件」（package）→請參考 Java 01.簡介</li><li>Line 3: 匯入 <code>Scanner</code> 類別。<code>Scanner</code> 是 Java 提供的輸入工具，屬於 <code>java.util</code> 套件中的類別，必須先透過 <code>import</code> 才能使用</li><li>Line 5: 「類別」（class）→請參考 Java 01.簡介</li><li>Line 6: 「主方法」（main）→請參考 Java 01.簡介</li><li>Line 7: 使用 <code>new Scanner(System.in)</code> 產生一個可以讀取鍵盤輸入的掃描器物件</li><li>Line 9-10: 顯示提示文字，並使用 <code>nextLine()</code> 讀取一整行包含空白的使用者輸入</li><li>Line 12: 輸出組合好的歡迎訊息</li></ul><blockquote><h3 id="小提醒：匯入-Scanner"><a href="#小提醒：匯入-Scanner" class="headerlink" title="小提醒：匯入 Scanner"></a>小提醒：匯入 Scanner</h3><p>記得在檔案最上方加上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure></blockquote><hr><h1 id="讀取其他型別的輸入"><a href="#讀取其他型別的輸入" class="headerlink" title="讀取其他型別的輸入"></a>讀取其他型別的輸入</h1><h2 id="範例：讀取整數與浮點數"><a href="#範例：讀取整數與浮點數" class="headerlink" title="範例：讀取整數與浮點數"></a>範例：讀取整數與浮點數</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputTypeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;請輸入年齡：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();  <span class="comment">// 讀取整數</span></span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;請輸入身高(cm)：&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">height</span> <span class="operator">=</span> scanner.nextDouble();  <span class="comment">// 讀取浮點數</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;年齡：&quot;</span> + age + <span class="string">&quot; 歲&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;身高：&quot;</span> + height + <span class="string">&quot; 公分&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 「套件」（package）→請參考 Java 01.簡介</li><li>Line 3: 匯入 <code>Scanner</code> 類別（如上方說明）</li><li>Line 5: 「類別」（class）→請參考 Java 01.簡介</li><li>Line 6: 「主方法」（main）→請參考 Java 01.簡介</li><li>Line 7: 建立可讀鍵盤輸入的 Scanner 物件</li><li>Line 9-10: 顯示提示訊息並使用 <code>nextInt()</code> 讀取整數輸入</li><li>Line 12-13: 顯示提示並使用 <code>nextDouble()</code> 讀取浮點數輸入</li><li>Line 15-16: 輸出年齡與身高</li></ul><blockquote><h3 id="小提醒：避免輸入錯誤"><a href="#小提醒：避免輸入錯誤" class="headerlink" title="小提醒：避免輸入錯誤"></a>小提醒：避免輸入錯誤</h3><p>如果先用 <code>nextInt()</code> 後面馬上接 <code>nextLine()</code>，會發生跳過的情形。<br>解法：中間加一行 <code>scanner.nextLine();</code> 清除換行符。</p></blockquote><hr><h1 id="綜合範例：輸入個人資訊"><a href="#綜合範例：輸入個人資訊" class="headerlink" title="綜合範例：輸入個人資訊"></a>綜合範例：輸入個人資訊</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProfileInput</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;請輸入姓名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;請輸入年齡：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        scanner.nextLine(); <span class="comment">// 清除換行符</span></span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;請輸入喜歡的顏色：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======== 輸出結果 ========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年齡：&quot;</span> + age);</span><br><span class="line">        System.out.println(<span class="string">&quot;喜歡的顏色：&quot;</span> + color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h2><ul><li>Line 1: 「套件」（package）→請參考 Java 01.簡介</li><li>Line 3: 匯入 <code>Scanner</code> 類別（如上方說明）</li><li>Line 5: 「類別」（class）→請參考 Java 01.簡介</li><li>Line 6: 「主方法」（main）→請參考 Java 01.簡介</li><li>Line 7: 建立 Scanner 物件</li><li>Line 9-10: 顯示提示並讀取姓名（使用 <code>nextLine()</code>）</li><li>Line 12-13: 顯示提示並使用 <code>nextInt()</code> 讀取年齡</li><li>Line 14: 加一行 <code>scanner.nextLine()</code> 清除多餘的換行符，避免跳過下一行輸入</li><li>Line 16-17: 顯示提示並讀取喜歡的顏色</li><li>Line 19-21: 將所有輸入資料格式化輸出</li></ul><hr><h1 id="本章練習題"><a href="#本章練習題" class="headerlink" title="本章練習題"></a>本章練習題</h1><ol><li><p>請設計一個小程式，輸入使用者的名字與年齡，並輸出格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">您好，張三，今年25歲，歡迎使用本系統！</span><br></pre></td></tr></table></figure></li><li><p>輸入使用者的身高與體重（浮點數），並計算 BMI：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BMI = 體重(kg) / 身高(m)^2</span><br></pre></td></tr></table></figure></li><li><p>試著使用 <code>nextLine()</code>、<code>nextInt()</code>、<code>nextDouble()</code> 各自輸入，觀察使用順序錯誤會發生什麼事？嘗試解決。</p></li><li><p>（加分題）輸入你的學號、系級與興趣，完整輸出一份「學生小檔案」。</p></li></ol><blockquote><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>練習順序：先文字 → 整數 → 再文字，記得用 <code>scanner.nextLine()</code> 處理跳行問題。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程式設計 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 01 簡介</title>
      <link href="/2023/02/06/Python/python-01/"/>
      <url>/2023/02/06/Python/python-01/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h1><p>　　首先，先從<a href="https://www.python.org/downloads/">Python官網</a>下載Python並安裝(3.7各套件支援最完整，但於今年都就不再更新，建議使用3.8或3.9)，之後環境變數在PATH中會自動設定。</p><h1 id="安装開發工具-IDE"><a href="#安装開發工具-IDE" class="headerlink" title="安装開發工具(IDE)"></a>安装開發工具(IDE)</h1><p>　　接著再從<a href="https://code.visualstudio.com/download">Visual Stdio Code官網</a>下載IDE並安裝，然後就可以開啟使用了。</p><h1 id="介紹Hello-World"><a href="#介紹Hello-World" class="headerlink" title="介紹Hello World!"></a>介紹Hello World!</h1><p>　　不能免俗的要介紹一下Hello World！</p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  多行註解</span></span><br><span class="line"><span class="string">  測試第一個class</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 顯示在Console的Hello World!</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    hw = HelloWorld()</span><br><span class="line">    hw.main()</span><br></pre></td></tr></table></figure><h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><p>　　一般市面上的書籍或線上教學都不是從物件導向設計（請參考<strong>物件導向設計</strong>）開始說明，但為了要能無縫接軌，我還是以類別為範例開始說起。讓我們從頭開始一行一行的看下去吧！</p><blockquote><p><strong>物件導向設計（英語：Object-oriented programming，縮寫：OOP）</strong><br>　　真實世界的事物轉為各種物件，物件之間彼此能互相操作溝通。而產生物件的東西就是類別。類別就如同設計圖一樣，依照此設計圖就能產生一個個的物件。</p></blockquote><ul><li>Line 1-4：多行註解</li><li>Line 5：class就是類別，類別會產生一個個的物件，就如同設計圖一樣，依照此設計圖就能產生一個個的物件。HelloWorld就是此類別的名稱，其命名方式是「大駝峰」（類別的命名方式請參考<strong>駝峰式命名</strong>）。</li><li>Line 6：def定義一個函式(function)，main為此函式名稱。self代表此類別或物件。-&gt;None定義此函式的回傳值，在Python回傳值的定義可有可無，無強制規定需定義。</li><li>Line 7：單行註解</li><li>Line 8：print此方法會將字串列印在標準輸入輸出裝置(Console)。</li><li>Line 10：當直接執行這隻程式時，__name__這個變數中的名稱會是__main__，若是由其他不同檔案的程式來呼叫這隻程式的話，就不會繼續執行裡面的東西。</li><li>Line 11：用這個類別新增一個物件hw。</li><li>Line 12：用這個物件去執行main的函式。</li></ul><blockquote><p><strong>駝峰式命名（Camel case）</strong><br>　　* 就像駝峰會一高一低<br>　　* 單字之間不空格，而是直接連起來，但是連起來的第一個字要大寫<br>　　* 例如：有一個 handle add post 的 function，就會叫做 handleAddPost<br>駝峰又有分兩種：<br>　　1. 小駝峰（lower camel case）：開頭是小寫，就像上面的範例 handleAddPost<br>　　2. 大駝峰（upper camel case）：又被稱為 Pascal Case。開頭變成大寫，也就會變成 HandleAddPost</p></blockquote><h2 id="練習題"><a href="#練習題" class="headerlink" title="練習題"></a>練習題</h2><p>　　1. 試著說明何謂 類別(Class)<br>　　2. 試著說明何謂 if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“ 的用途<br>　　3. 試著建立一個類別為Homework，在Console中顯示您的個人資料，例：姓名、年齡、生日、喜好…等等。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 程式設計 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 01 簡介</title>
      <link href="/2023/02/04/Java/java-01/"/>
      <url>/2023/02/04/Java/java-01/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Java-JDK"><a href="#安装Java-JDK" class="headerlink" title="安装Java(JDK)"></a>安装Java(JDK)</h1><p>　　首先，先從<a href="https://www.azul.com/downloads/?package=jdk#download-openjdk">Zulu官網</a>下載Java Development Kit(JDK)並安裝，之後設定環境變數JAVA_HOME及在PATH中設定%JAVA_HOME%&#x2F;bin。</p><h1 id="安装開發工具-IDE"><a href="#安装開發工具-IDE" class="headerlink" title="安装開發工具(IDE)"></a>安装開發工具(IDE)</h1><p>　　接著再從<a href="https://netbeans.apache.org/download/index.html">NetBeans官網</a>下載IDE並安裝，然後就可以開啟使用了。</p><h1 id="介紹Hello-World"><a href="#介紹Hello-World" class="headerlink" title="介紹Hello World!"></a>介紹Hello World!</h1><p>　　不能免俗的要介紹一下Hello World！</p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mendel.teaching;</span><br><span class="line"><span class="comment">/* 多行註解</span></span><br><span class="line"><span class="comment"> * 測試第一個class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 顯示在Console的Hello World!</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><p>　　因為Java是典型的物件導向設計的程式語言（請參考<strong>物件導向設計</strong>），所以以上的範例是用類別來寫的。讓我們從頭開始一行一行的看下去吧！</p><blockquote><p><strong>物件導向設計（英語：Object-oriented programming，縮寫：OOP）</strong><br>　　真實世界的事物轉為各種物件，物件之間彼此能互相操作溝通。而產生物件的東西就是類別。類別就如同設計圖一樣，依照此設計圖就能產生一個個的物件。</p></blockquote><ul><li>Line 1：提供「套件」（package）來管理類別，套件被設計與檔案系統結構相對應，如果您的套件設定為org.mendel.teaching，則該類別應該在 Classpath(程式編譯後的位置) 可以存取到的路徑下的 org 目錄下之 mendel 目錄下之 teaching 找到，沒有設定套件管理的類別會歸為「預設套件」（default package）。</li><li>Line 2-4：多行註解</li><li>Line 5：public是存取修飾符(Access Modifiers)，主要是用在其他的物件可否存取這個物件的內容。class就是類別。MyClass就是此類別的名稱，其命名方式是「大駝峰」（類別的命名方式請參考<strong>駝峰式命名</strong>）。</li><li>Line 6：static靜態的意思，此為靜態方法(Method)，也就是不管有幾個物件全都共用這個方法。void代表不回傳值，執行方法之後可以回傳一個值。main此為Java程式的「進入點」（Entry point），也就是程式會從此方法的第一行開始執行。String[] args傳入的參數，呼叫此方法會傳入的字串陣列(Array)的參數(Parameter)。</li><li>Line 7：單行註解</li><li>Line 8：System.out.println此方法會將字串列印在標準輸入輸出裝置(Console)。<blockquote><p><strong>駝峰式命名（Camel case）</strong><br>　　* 就像駝峰會一高一低<br>　　* 單字之間不空格，而是直接連起來，但是連起來的第一個字要大寫<br>　　* 例如：有一個 handle add post 的 function，就會叫做 handleAddPost<br>駝峰又有分兩種：<br>　　1. 小駝峰（lower camel case）：開頭是小寫，就像上面的範例 handleAddPost<br>　　2. 大駝峰（upper camel case）：又被稱為 Pascal Case。開頭變成大寫，也就會變成 HandleAddPost</p></blockquote></li></ul><h2 id="練習題"><a href="#練習題" class="headerlink" title="練習題"></a>練習題</h2><p>　　1. 試著說明何謂 套件(Package)<br>　　2. 試著說明何謂 main<br>　　3. 試著建立一個類別為Homework，在Console中顯示您的個人資料，例：姓名、年齡、生日、喜好…等等。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程式設計 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
